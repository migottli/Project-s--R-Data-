head(citytown2)
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
#Getting rid of shit
village2 <- village[,c("NAME", "prores", "propolac")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
#This is how I'm numbering the row names
village2$RN <- 95:13
row.names(as(village2, "data.frame"))
village2$RN <- 95:13
xx1 <- spChFIDs(village2, as.character(village2$RN))
#REPEAT FOR INSAMPLE DATA
#Pull in shapefiles
insample <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Insample.shp')
head(insample)
#Get rid of extraneous data in shapefile
insample2 <- insample[,c("NAME", "prores", "propolac")]
head(insample2)
#Now do this for the villages
insample_village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Insample_villages.shp')
head(insample_village)
#Getting rid of shit
insample_village2 <- insample_village[,c("NAME", "prores", "propolac")]
head(insample_village2)
#Check to make sure it's still a spatial data frame
class(insample_village2)
#Change row names to be unique IDs
#Row names for citytown
row.names(insample2)
row.names(insample_village2)
#This is how I'm numbering the row names
insample_village2$RN <- 44:57
row.names(as(insample_village2, "data.frame"))
xx1 <- spChFIDs(insample_village2, as.character(insample_village2$RN))
row.names(as(xx1, "data.frame"))
#Delete the RN column that we made above to rename the rows
head(xx1)
xx1 <- xx1[,c("NAME", "prores", "propolac")]
#Rbind them together
insample_cityvillage <- spRbind(insample2, xx1)
head(insample_cityvillage)
View(insample_cityvillage@data)
class(insample_cityvillage)
#Plot the cityvillage data
plot(insample_cityvillage)
#Find adjacent polygons
library(spdep)
w <- poly2nb(insample_cityvillage)
class(w)
summary(w)
str(w)
#Create a matrix from the list of links
#Because the data did not have all neighbours had to set zero.policy to be TRUE
wm <- nb2mat(w, style='B', zero.policy=TRUE)
wm
#Create spatial weights object with binary (true/false) distance weights
ww <- nb2listw(w, style='B', zero.policy = TRUE)
print.listw(ww, zero.policy = TRUE)
#Moran's I test
moran(insample_cityvillage$prores, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(insample_cityvillage$propolac, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
#Test for significance
#Moran's I in Monte Carlo. This is the best way to do Moran's I***
moran.mc(insample_cityvillage$prores, ww, nsim=99, zero.policy = TRUE)
moran.mc(insample_cityvillage$propolac, ww, nsim=99, zero.policy = TRUE)
#Load packages kate says
library(maptools)
library(sp)
library(rgeos)
#Pull in shapefiles
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Southern_Tier.shp')
head(citytown)
#Get rid of extraneous data in shapefile
citytown2 <- citytown[,c("NAME", "prores", "propolac")]
head(citytown2)
#Now do this for the villages
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
#Getting rid of shit
village2 <- village[,c("NAME", "prores", "propolac")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
village2$RN <- 95:13
#Load packages kate says
library(maptools)
library(sp)
library(rgeos)
#Pull in shapefiles
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Southern_Tier.shp')
head(citytown)
#Get rid of extraneous data in shapefile
citytown2 <- citytown[,c("NAME", "prores", "propolac")]
head(citytown2)
#Now do this for the villages
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
#Getting rid of shit
village2 <- village[,c("NAME", "prores", "propolac")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
village2$RN <- 95:134
village2$RN <- 95:133
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
row.names(as(xx1, "data.frame"))
#Delete the RN column that we made above to rename the rows
head(xx1)
xx1 <- xx1[,c("NAME", "prores", "propolac")]
#Rbind them together
cityvillage <- spRbind(citytown2, xx1)
head(cityvillage)
View(cityvillage@data)
class(cityvillage)
#Plot the cityvillage data
plot(cityvillage)
#Find adjacent polygons
library(spdep)
w <- poly2nb(cityvillage)
class(w)
summary(w)
str(w)
wm <- nb2mat(w, style='B', zero.policy=TRUE)
wm
ww <- nb2listw(w, style='B', zero.policy = TRUE)
print.listw(ww, zero.policy = TRUE)
moran(cityvillage$prores, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$propolac, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran.mc(cityvillage$prores, ww, nsim=99, zero.policy = TRUE)
moran.mc(cityvillage$propolac, ww, nsim=99, zero.policy = TRUE)
install.packages("UScensus2010")
UScensus2010::demographics(dem = "race", CA, statefips = FALSE, level = c("county"), msaname = NULL)
?UScensus2010
UScensus2010::check.state(CA, statefips=FALSE)
UScensus2010::check.state(California, statefips=FALSE)
data(California.blk)
data <- data(california.blk)
data <- data(california.blk10)
data <- data(California.blk10)
data <- data("california.blk10")
library(UScensus2010)
data <- data("california.blk10")
data <- data("California.blk10")
data <- data(california.blk10)
library(UScensus2010blk)
install.packages("UScensus2010blk")
library(UScensus2010blk)
install.packages('UScensus2010blk', repos='http://lakshmi.calit2.uci.edu/census2000/R/', type='source')
data <- data(california.blk10)
library(maptools)
library(sp)
library(rgeos)
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
write.shp(moran, 'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.shp')
library(rgdal)
write.shapefile(moran, 'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.shp')
moran_shp <-  convert.to.shapefile(moran, 1)
moran_shp <-  write.OGR(moran, driver = "ESRI Shapefile")
moran_shp <-  writeOGR(moran, driver = "ESRI Shapefile")
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
class(moran)
coordinates(moran) <- gnis_id
coordinates(moran) <- -~longitude+latitude
moran.df <- SpatialPointsDataFrame(moran, data.frame(id=1:length(moran)))
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/CityTown.shp')
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/CityTown.shp')
head(citytown)
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
merge(moran, citytown, by = 'NAME')
head(moran_shp)
moran_shp <- merge(moran, citytown, by = 'NAME')
head(moran_shp)
citytown2 <- moran_shp[,c("muni", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
citytown2 <- moran_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(citytown2)
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
moran_village_shp <- merge(moran_village, Village, by = 'NAME')
moran_village <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_village.csv')
moran_village_shp <- merge(moran_village, Village, by = 'NAME')
moran_village_shp <- merge(moran_village, village, by = 'NAME')
head(moran_village_shp)
#Getting rid of shit
village2 <- moran_village[,c("muni", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
village2 <- moran_village[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
row.names(citytown2)
row.names(village2)
#This is how I'm numbering the row names
village2$RN <- 95:13
row.names(citytown2)
row.names(village2)
village2$RN <- 1066:1612
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
village2$RN <- 1066:1612
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
class(citytown2)
head(xx1)
class(village)
village2 <- moran_village_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(village2)
class(village2)
class(moran_village_shp)
class(moran_village_shp)
moran_shp <- shapefile(moran_shp,'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp')
shapefile(moran_shp,'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp')
library(raster)
shapefile(moran_shp,'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp')
library(maptools)
library(sp)
library(rgeos)
library(rgdal)
library(raster)
moran <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran.csv')
moran_village <- read.csv('C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_village.csv')
#Pull in shapefiles
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/CityTown.shp')
head(citytown)
#Merge the shapefile with the new csv data
moran_shp <- merge(moran, citytown, by = 'NAME')
head(moran_shp)
#Save as shapefile
shapefile(moran_shp,'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp')
citytown2 <- moran_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(citytown2)
shapefile(citytown2,'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp')
class(citytown)
shapefile(moran_shp, filename = 'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp', overwrite = FALSE)
shapefile(moran_shp)
moran_shp2 <- shapefile(moran_shp, filename = 'C://Users/Madeline/Desktop/Gwen/GIS stuff/moran_shp.shp', overwrite = FALSE)
citytown2 <- moran_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(citytown2)
#Now do this for the villages
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
class(village)
#Merge the village shapefile with the new village data
moran_village_shp <- merge(moran_village, village, by = 'NAME')
head(moran_village_shp)
class(moran_village_shp)
#Getting rid of shit
village2 <- moran_village_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
class(citytown2)
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
head(village)
class(village)
#Merge the village shapefile with the new village data
moran_village_shp <- merge(moran_village, village, by = 'NAME')
head(moran_village_shp)
class(moran_village_shp)
#Getting rid of shit
village2 <- moran_village_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
class(citytown2)
#Convert back to spatial polygons data frame
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
#Now do this for the villages
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/Village.shp')
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/NY_Shapefile/Village.shp')
head(village)
class(village)
#Merge the village shapefile with the new village data
moran_village_shp <- merge(moran_village, village, by = 'NAME')
head(moran_village_shp)
class(moran_village_shp)
#Getting rid of shit
village2 <- moran_village_shp[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
class(citytown2)
#Convert back to spatial polygons data frame
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
#This is how I'm numbering the row names
village2$RN <- 1066:1612
village2$RN <- 1066:1611
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
row.names(as(xx1, "data.frame"))
moran_shp2 <- shapefile(moran_shp, filename = 'C://Users/Madeline/Desktop/Gwen/GIS stuff/NY_Shapefilemoran_shp.shp', overwrite = FALSE)
View(moran_village)
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/CitiesAndTownsMoran.shp')
head(citytown)
class(citytown)
citytown2 <- citytown[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
citytown2 <- citytown[,c("NAME", "muni_type", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
citytown2 <- citytown[,c("NAME", "MUNI_TYPE", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
head(citytown2)
class(citytown2)
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/NY_Shapefile/VillagesMoran.shp')
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/VillagesMoran.shp')
head(village)
class(village)
village2 <- moran_village_shp[,c("NAME", "MUNI_TYPE", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
village2 <- moran_village_shp[,c("NAME", "muni_tyoe", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/VillagesMoran.shp')
head(village)
village2 <- village[,c("NAME", "muni_tyoe", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
village2 <- village[,c("NAME", "muni_tyoe", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/VillagesMoran.shp')
village2 <- village[,c("NAME", "muni_tyoe", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
village2 <- village[,c("NAME", "muni_type", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
head(village2)
#Check to make sure it's still a spatial data frame
class(village2)
class(citytown2)
row.names(citytown2)
row.names(village2)
village2$RN <- 994:1536
village2$RN <- 994:1537
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
row.names(as(xx1, "data.frame"))
#Delete the RN column that we made above to rename the rows
head(xx1)
xx1 <- xx1[,c("NAME", "muni_type", "pro_noroadlocal_binary","pro_noroadnolocal_binary", "pro_roadnolocal_binary", "roaduse_binary", "localinvolvedagencies", "allpro_binary")]
xx1 <- xx1[,c("NAME", "muni_type", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
#Rbind them together
cityvillage <- spRbind(citytown2, xx1)
head(xx1)
cityvillage <- spRbind(citytown2, xx1)
library(plyr)
rename(xx1, c("muni_type"="MUNI_TYPE"))
#Rbind them together
cityvillage <- spRbind(citytown2, xx1)
library(maptools)
library(sp)
library(rgeos)
library(rgdal)
library(raster)
#Pull in shapefiles
citytown <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/CitiesAndTownsMoran.shp')
head(citytown)
class(citytown)
citytown2 <- citytown[,c("NAME", "MUNI_TYPE", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
head(citytown2)
class(citytown2)
village <- shapefile('C://Users/Madeline/Desktop/Gwen/GIS stuff/VillagesMoran.shp')
head(village)
class(village)
village2 <- village[,c("NAME", "muni_type", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
head(village2)
library(plyr)
rename(village2, c("muni_type"="MUNI_TYPE"))
head(village2)
rename(village2, c("muni_type"="MUNI_TYPE"))
head(village2)
names(village2)[names(village2)=="muni_type"] <- "MUNI_TYPE"
head(village2)
class(village2)
class(citytown2)
#Change row names to be unique IDs
#Row names for citytown
row.names(citytown2)
row.names(village2)
#This is how I'm numbering the row names
village2$RN <- 994:1537
row.names(as(village2, "data.frame"))
xx1 <- spChFIDs(village2, as.character(village2$RN))
row.names(as(xx1, "data.frame"))
#Delete the RN column that we made above to rename the rows
xx1 <- xx1[,c("NAME", "muni_type", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
xx1 <- xx1[,c("NAME", "MUNI_TYPE", "pro_noro_1","pro_noroad", "pro_roadno", "roaduse_bi", "localinvol", "allpro_bin")]
head(xx1)
#Rbind them together
cityvillage <- spRbind(citytown2, xx1)
head(cityvillage)
View(cityvillage@data)
class(cityvillage)
#Plot the cityvillage data
plot(cityvillage)
#Find adjacent polygons
library(spdep)
w <- poly2nb(cityvillage)
class(w)
summary(w)
str(w)
#Create a matrix from the list of links
#Because the data did not have all neighbours had to set zero.policy to be TRUE
wm <- nb2mat(w, style='B', zero.policy=TRUE)
wm
#Create spatial weights object with binary (true/false) distance weights
ww <- nb2listw(w, style='B', zero.policy = TRUE)
print.listw(ww, zero.policy = TRUE)
#Moran's I test
moran(cityvillage$pro_noroadlocal_binary, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$pro_noro_1, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$pro_noroad, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$pro_roadno, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$roaduse_bi, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$allpro_bin, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran(cityvillage$localinvol, ww, n=length(ww$neighbours), S0=Szero(ww), zero.policy=TRUE)
moran.mc(cityvillage$pro_noro_1, ww, nsim=99, zero.policy=TRUE)
moran.mc(cityvillage$pro_noroad, ww, nsim=99, zero.policy=TRUE)
moran.mc(cityvillage$pro_roadno, ww, nsim=99, zero.policy=TRUE)
moran.mc(cityvillage$roaduse_bi, ww, nsim=99, zero.policy=TRUE)
moran.mc(cityvillage$allpro_bin, ww, nsim=99, zero.policy=TRUE)
moran.mc(cityvillage$localinvol, ww, nsim=99, zero.policy=TRUE)
library(ggmap)
source('C:/Users/Madeline/Desktop/Madeline\'s/Geolocating.R', echo=TRUE)
setwd("C:/R/")
#Bring in data
geo_OH <- read.csv('Ohio_survey_data.csv')
head(geo_OH)
#Merge three columns (address attributes) into one -- only for text string
#Put separate by comma because google probably checks that way but could put space or others
geo_OH$full.add <- paste(geo_OH$address, geo_OH$address_2, geo_OH$city, geo_OH$zip, sep = ",")
head(geo_OH)
#Try geocoding again for multiple addresses in a spreadsheet -- NOTE: you have to call out the specific column that has the addresses in the spreadsheet
geo_OH$coord <- geocode(geo_OH$full.add, output = "latlon", source = c("google"))
warnings()
head(geo_OH)
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add", "coord.lon", "coord.lat")]
View(geo_OH)
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit")]
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name")]
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add")]
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add", "coord.lat")]
head(geo_OH)
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add", "geo_OH$coord.lat")]
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add", "coord.lon")]
geo_OH_2 <- geo_OH[,c("unit", "second_unit", "third_unit", "name", "full.add", "coord")]
head(geo_OH_2)
write.csv(geo_OH_2, file = "oh_survey_geocode.csv")
write.csv(geo_OH_2, file = "C:/R/oh_survey_geocode.csv")
?write.csv
write.csv(geo_OH_2, file = "OH_survey_geocode.csv", quote=FALSE)
write.csv(geo_OH_2, file = "OH_survey_geocode.csv", col.names=TRUE)
View(geo_OH_2)
plot(geo_OH_2)
plot(geo_OH_2$coord)
points(geo_OH_2$coord)
points(geo_OH_2$coord.lon, geo_OH_2$coord.lat)
states <- getData(name = "GADM", country="USA", level=1, download = TRUE, path = "C:/GIS")
head(states)
oh <- states[states$HASC_1=="US.OH",]
plot(oh)
points(geo_OH_2$coord.lon, geo_OH_2$coord.lat, add=TRUE)
points(geo_OH_2$coord.lon, geo_OH_2$coord.lat)
plot(go_OH_2$coord)
plot(geo_OH_2$coord)
points(geo_OH_2$coord)
plot(oh)
points(geo_OH_2$coord)
points(geo_OH_2$coord.lon, geo_O
points(geo_OH_2$coord.lon, geo_OH_2$coord.lat)
#How to export back to a csv on your computer
points(geo_OH_2$coord.lon, geo_OH_2$coord.lat)
projection(geo_OH_2)
projection(geo_OH_2$coord)
projection(oh)
og_Wells <- read.csv("OG_Wells.csv")
og_Wells <- read.csv("OG_Wells.csv")
plot(og_wells$LAT83, ogwells$LONG83)
og_wells <- read.csv("OG_Wells.csv")
plot(og_wells$LAT83, ogwells$LONG83)
plot(og_wells$LAT83, og_wells$LONG83)
plot(oh)
points(geo_OH_2$coord)
points(og_wells$LAT83, og_wells$LONG83)
points(og_wells$LAT83, og_wells$LONG83, add=TRUE)
plot(oh)
points(og_wells$LAT83, og_wells$LONG83)
View(og_wells)
points(og_wells$LONG83, og_wells$LAT83)
?colors
points(geo_OH_2$coord, col="red")
plot(oh)
points(geo_OH_2$coord, col="red")
points(og_wells$LONG83, og_wells$LAT83)
plot(oh)
points(og_wells$LONG83, og_wells$LAT83)
#Plot the addresses
points(geo_OH_2$coord, col="red")
?dist2points
